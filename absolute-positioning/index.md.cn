
# 绝对定位


布局系统（flex 或者传统的 CSS 文档流）易于排列相对于彼此一个挨着一个的元素：

![](layout-relative.jpg)



有时，元素并不彼此相关，但是和容器相关。你可以用绝对定位来指定这些元素应该在哪里。举个例子，把元素放在角上：

![](layout-absolute.jpg)



在同一个容器里，你可以把使用布局系统定位的元素，和使用绝对定位的元素混合在一起。

![](layout-mixed.jpg)



绝对定位的元素就像贴纸一样。它们可能覆盖了下面的元素：

![](layout-stacking-order.jpg)

最后，你可以把元素放在容器外面：

![](layout-absolute-outside.jpg)



### 你的任务

把这个 app demo 嵌入到 iPhone 框架里：

![](iphone-demo.jpg)



给背景图片添加一个透明渐变覆盖层，平滑地过渡到页面背景色：

![](background-overlay.jpg)

把 Android 机器人添加到最后部分的右下角：

![](android-robot-peek.jpg)



# Static 对比 Relative

一个绝对定位的元素经常与它的容器有关。让我们把一个红盒子放在一个绿盒子的内部：



```html
<div class="green">
  <div class="red">
  </div>
</div>
```

```css
.red {
  position: absolute;

  top: 10px;
  left: 10px;
}
```



如果绿色盒子是 `position: relative`，它的行为符合预期：

![](relative-container.jpg)



如果绿盒子是 `position: static`，红盒子现在忽略掉了绿盒子，它就不在那儿了：

![](static-container.jpg?)

（演示： http://codepen.io/hayeah/pen/ZbOzWV?editors=110）



`position: static` 是 CSS 的默认设定，但是它基本没用。当使用绝对定位的时候，你总应该记住把父容器设为 `positon: relative`。

ReactNative 把默认值改成了 `position: relative`，因此我们不需要担心这种问题：



```css
/* ReactNative 默认值 */
body, div, span {
  box-sizing: border-box;

  /******************/
  position: relative;
  /******************/

  display: flex;
  flex-direction: column;
  align-items: stretch;
  flex-shrink: 0;
  align-content: flex-start;

  border: 0 solid black;
  margin: 0;
  padding: 0;
}
```



### 练习：iPhone 演示

使用绝对定位把演示图片嵌入 iPhone 框架里。尺寸为：



![](annotated-iphone-frame.jpg?)



添加到“Native Experience”部分：

```html
<img src="img/tumblr-demo.jpg"/>
```



添加到“Touch & Gestures”部分：

```html
<img src="img/swype-demo.jpg"/>
```



你的结果：

![](embeded-iphone-demo.jpg)



# 百分比定位

对于响应式设计，你应该经常使用百分比（%）来定位元素，因此它们的位置与窗口/屏幕的大小有关：

![](topleft-50-50.jpg)



尽管有一个问题... `top, left` 把左上角移动到了被定位的元素里。你往往想把被定位的元素居中。移动元素中心的最简单方法是使用 transform 属性，按元素大小的 50% 移动它：

![](topleft-50-50-translated.jpg)



无论被定为元素有多大，这种技术都可以工作。把元素定位在容器边缘的中间：

![](centered-positions.jpg)



百分比对于不同 CSS 属性的意义有很多，这点令人迷惑。但是这基本是你期望看到的：

+ `left, right` - 参考容器宽度的百分比。
+ `top, bottom` - 参考容器高度的百分比。
+ `translate(x%,y%)` - 参考变换元素宽(x)或高(y)的百分比。
+ `padding, margin` - 参考容器宽度的百分比。
  + 对水平方向有用，垂直方向无用。



> 注：使用传统 CSS 布局技术来垂直居中元素非常非常难，经常是与容器宽度有关的 `margin-top` 和 `margin-bottom`，而不是与高度有关。
>
> 如果你因为兼容性的考量不能使用 CSS3 `transform`，你就需要知道被定位元素的宽度和高度的具体值，并根据这些值给被定位元素设置一个负的 margin 值。通过这些操作后，最终才能使被定位元素居中。



### 练习：Android 机器人

把 android 机器人放在右下角.

```html
<img id="android-robot" src="img/android-robot.svg"/>
```

+ `overflow: hidden` - 如果超出边界，容器应该把机器人隐藏。
+ `rotate(-45deg)` - 旋转这个机器人。

你的结果：

![](android-robot-peek-done.jpg)



# Fixed 定位

`position: fixed`  和 `position: absolute` 的行为相似。唯一的不同点在于 fixed 是相对于浏览器窗口而非父容器进行定位的。由于是相对于浏览器窗口定位，所以上下滚屏也不会改变元素在窗口中显示的位置。这样的性质对于制作 UI 导航栏和菜单栏尤为有用。



### 练习：滚动控制

添加 html：



```html
<div id="slider-control">
  <a href="#native" class="active">
    <div class="dot"></div>
  </a>

  <a href="#touch">
    <div class="dot"></div>
  </a>

  <a href="#async">
    <div class="dot"></div>
  </a>

  <a href="#flex">
    <div class="dot"></div>
  </a>
</div>
```



一些基础的样式：

```css
#slider-control {
  padding: 3px;
}

#slider-control a {
  padding: 3px;
}

#slider-control .dot {
  width: 16px;
  height: 16px;
  border: 1px solid #fff;
  border-radius: 8px;
}

#slider-control .active .dot {
  background-color: #fff;
}
```



你的结果：

<video src="fixed-slider-control.mp4" controls autoplay loop></video>



# Overlay

不用 overlay，背景变换看起来很唐突：

![](bg-without-overlay.jpg)

我们需要创建一个渐变 overlay 从背景颜色平滑过渡。就像这样：

![](gradient-overlay.jpg?)



有三个图层需要堆在一起：

1. Bottom - 背景图片。
2. Middle - 线性渐变 overlay。
3. Top - 内容（标题，导航链接）。



`img` 和 `h1` 元素都是 `position: static`。`z-index` 对 static 元素不起作用，因此它们经常在绝对定位的元素下面：

![](z-order-static.jpg)

你应该把标题设为 `position: relative` 来给它设定一个 z-index。现在标题会在 overlay 上出现了：

![](z-order-relative.jpg)



### 练习：介绍部分的背景

把背景设为一张图片：

```css
#intro-section {
  background-image: url(../img/background.jpg);
  background-size: cover;
  background-position: center;
}
```



你的结果：

![](bg-without-overlay.jpg)



### 练习：线性渐变 Overlay

Overlay 的样式为：

```css
.overlay {
  background-image: linear-gradient(rgba(0,0,0,0),rgba(31,30,52,1));
}
```



确保内容不在 overlay 的后面：

![](z-index-problem.jpg)

你的结果：

![](bg-with-overlay.jpg)



# 总结

`position: static` 没什么用，有时还会起负面作用。把全局设为这个值并不是一个坏主意：

```css
* {
  position: relative;
}
```



+ 容器不能为 `position: static`。
+ 使用百分比对元素进行响应式定位。
+ 使用 CSS transform 的 `translate` 函数根据它自己大小的百分比来偏移一个元素。
+ 如果一个元素为 `position: static`，它不会有 z-index。

