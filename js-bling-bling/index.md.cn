

# JavaScript Bling Bling

在这部分我们将使用 JavaScript 添加动画效果。



### 浮动的 React Logo

<video src="react-logo-yoyo-float.mp4" controls autoplay loop></video>

### 让 Android Robot 动起来

<video src="android-shakeit.mp4" controls autoplay loop></video>

### 网页滚动动画

<video src="animated-scroll.mp4" controls autoplay loop></video>



# JavaScript 动画 VS CSS 动画

很多前端开发者会告诉你，你应该避免使用 JavaScript 动画，使用 CSS 动画来获得更好的性能（更少的 CPU 时间）和更平滑的效果（更高的帧率）。

然而，JavaScript 动画慢得原因经常是你用的库没有为动画进行优化。优化过的 JavaScript 动画引擎（比如 [GreenSock](https://www.greensock.com) 或 [Velocity.js](http://velocityjs.org/)）有堪比 CSS 动画的性能。



让我们试试 [JavaScript Animation Speed Test](https://www.greensock.com/js/speed.html)，比较不同的库来观察它们的性能差异。在我的测试里，我把粒子数量设为了 500 。你可以尝试更多或更少的粒子。Demo 类似：

<video src="particles-flyout-demo.mp4" controls loop autoplay></video>

测试结果：

+ jQuery: ~10fps.
+ Zepto: ~16fps.
+ TweenJS: ~28fps.
+ GreenSock (GSAP): 50~60fps.



你可以获得 5~6 倍的性能提升，仅仅通过使用其他的 JavaScript 库！对于 JavaScript 动画和 CSS 动画的性能比较，参见：

+ [CSS animations performance: the untold story](http://greensock.com/css-performance)

因此不要担心性能表现，它不是 JavaScript 的问题。我们将为这个项目使用 GreenSock。以后当我们实现滚动效果的时候，GreenSock 把来回播放动画变得极其简单：

<video src="scrollmagic-scrubbing.mp4" controls loop></video>

注：参考 [Animate.css](https://daneden.github.io/animate.css/)，一种使用 CSS 动画库的简易方法。



# JavaScript 动画是如何工作的

让我们看一下如何实现一个在水平方向上摆动元素的 JavaScript 动画：

<video src="sinewave-animation.mp4"></video>

我们可以使用正弦图形来根据时间确定它的位置：

![](sine-animation-curve.jpg)

之后我们使用 `setTimeout` 来调度 `draw` 函数，每秒重绘 60 次元素（或者每 16ms 重绘一次）：



```js
var deg360 = 2*Math.PI;
var $box = document.getElementById("box");

// 每秒做 60 个记号。把它当做计算当前时间的计数器。
var tick = 0;
function draw() {
  var second = tick / 60;

  // 计算当前位置
  var x = Math.sin(second * deg360) * 100;
  $box.style.left = x + "px";

  tick++;

  // 设置一个计时器在 16ms 后重绘（60fps）
  setTimeout(draw,1000/60);
}


setTimeout(draw,1000/60);
```



参见：[Codepen Demo](http://codepen.io/hayeah/pen/XmKYxr?editors=011)

不过，浏览器（或者 iOS for ReactNative）以一个固定速率刷新屏幕，`setTimeout` 计时器可能在无法预测的时间调用 `draw`。假定 `draw` 花了 10ms，它有时可能在屏幕刷新之后结束：

![](setTimeout-not-sync.jpg)

为了确保 `draw` 总是有足够的时间运行，我们可以使用 `requestAnimationFrame` 来使得 `draw` 方法的执行频率与屏幕刷新频率相同。时间线看起来像这样：

![](rAF-sync.jpg)

`draw` 的调用现在可以与屏幕刷新完美同步了，它们·保·证·会在屏幕实际刷新前结束运行。

使用 `requestAnimationFrame` 重写动画循环：



```js
var deg360 = 2*Math.PI;
var $box = document.getElementById("box");

var start = null;
function draw(time) {
  // `time` 现在是以毫秒表示的当前时间
  if(!start) {
    start = time;
  }

  var second = (time - start) / 1000;

  // 每秒一个 sin 循环
  var x = Math.sin(second * deg360) * 100;
  $box.style.left = x + "px";

  // 与浏览器同步重绘
  requestAnimationFrame(draw);
}


requestAnimationFrame(draw);
```



参考：[Codepen Demo](http://codepen.io/hayeah/pen/QjExJZ?editors=011)

注：ReactNative 同样支持 `requestAnimationFrame`，使用 [CADisplayLink](http://www.bigspaceship.com/ios-animation-intervals/) 构建。

注：[Layout thrashing](http://wilsonpage.co.uk/preventing-layout-thrashing/) 是另外一个原生 JavaScript 动画慢得原因。你应该知道它是什么，但是不用担心。优化过的 JavaScript animation 会避免 layout thrashing 。



# GreenSock

GreenSock 是有着愚蠢名字的优秀动画库。安装：



```
# (GSAP - GreenSock Animation Platform)
npm install gsap@1.18.0 --save
```



从现在开始，我们会使用 `<script>` 标签加载这个库。之后我们会学习如何将它作为一个 CommonJS 模块使用。GSAP 库被安装在 `node_modules/gsap/src/uncompressed/TweenMax.js`。添加到 `index.html`：



```js
<script type="text/javascript" src="node_modules/gsap/src/uncompressed/TweenMax.js"></script>
```



从开发者工具里，你应该看到 TweenMax 被加载了，而且它添加了全局 JavaScript 对象 `TweenMax` 和 `TimelineMax`：

![](TweenMax-loaded.jpg?)



### TweenMax API

你可以使用 TweenMax 来自定义 CSS 属性动画。三个最重要的方法是 `to`, `from` 和 `fromTo`。我们会使用一个叫 `#box` 的居中的元素来演示这些方法。

+ `TweenMax.to(object,duration,options)` - 自定义属性动画：由 CSS 样式表中的值变化为自定义的值。



```js
// `#box` 元素进行 2 秒的动画
TweenMax.to("#box",2,{
  css: {
    // 在同时更改多个 CSS 属性
    left: "200px",
    opacity: 0,
  },
});
```



对于使用动画把元素移出的情况，这将非常有用：

<video src="TweenMaxTo.mp4" autoplay controls loop></video>

[Codepen Demo](http://codepen.io/hayeah/pen/xwOmEj)

+ `TweenMax.from(object,duration,options)` - 自定义属性动画：由自定义的值变化为 CSS 样式表中的值。



```js
// `#box` 元素进行 2 秒的动画
TweenMax.from("#box",2,{
  css: {
    // 在同时更改多个 CSS 属性
    left: "-200px",
    opacity: 0,
  },
});
```



对于使用动画把元素移入的情况，这将非常有用：

<video src="TweenMaxFrom.mp4" autoplay controls loop></video>

[Codepen Demo](http://codepen.io/hayeah/full/NGreMb/)

+ `TweenMax.fromTo(object,duration,optionsFrom,optionsTo)` - 自定义属性动画：由自定义初始值变化为自定义终值。



```js
TweenMax.fromTo("#box",1, {
    // from
    css: {
      left: "-200px",
    }
  },{
    // to
    css: {
      left: "200px",
    },

    // 永久重复动画的选项
    repeat: -1,

    // 反转、重新运行动画的选项
    yoyo: true,
  }
);
```



<video src="TweenMaxFromToYoyo.mp4"></video>

[Codepen Demo](http://codepen.io/hayeah/full/LpZMBa)



### Easing 函数

有 3 种 ease 类型：

+ `easeIn` - 开始很慢，结束前加速。
+ `easeOut` - 开始很快，接近结尾时减速。
+ `easeInOut` - 开始很慢，中间加速，然后再次减速。

[Ease Visualizer](http://greensock.com/ease-visualizer) 是测试 easing 函数的不错的工具，这些函数都被包含在了 GreenSock 中。

<video src="gsap-visualizer.mp4" controls></video>

你可能发现 yoyo 动画在开始（接近左侧）时有点儿加速。在循环动画中，easeInOut 是更佳的 easing 类型。



```js
TweenMax.fromTo("#box",1, {
    // from
    css: {
      left: "-200px",
    }
  },{
    // to
    css: {
      left: "200px",
    },

    // 永久重复动画的选项
    repeat: -1,

    // 反转、重新运行动画的选项
    yoyo: true,

    // 改变 easing 类型
    ease: Power2.easeInOut,
  }
);
```



<video src="TweenYoyoEaseInOut.mp4" controls></video>

[Codepen Demo](http://codepen.io/hayeah/pen/meEvVE)



### 练习：让 React Logo 动起来

+ 创建 `js/app.js`。使用一个 `<script>` 标签来加载它。
+ 修改 `make server`，当 `js/app.js` 改变时，刷新页面。
+ 写出 `animateLogo` 函数。
+ 选择适合的 easing 函数和你喜欢的动画持续时间。



```js
// 当页面加载完毕时开始动画。
window.onload = function() {
  animateLogo();
};
```



你的结果：

<video src="react-logo-yoyo-float.mp4" controls></video>



# 渲染监控器

你可以使用 Chrome 开发者工具来查看你动画的表现是多么好。

<video src="rendering-fps-monitor.mp4" controls></video>

你可以看到正在以 60fps 运行，像之前承诺的一样。

"Show paint rectangles" 展示给你一些绿色的矩形。这些是浏览器在重绘的区域。我们可以看到三个元素正在被重绘的区域：

+ Logo 在重绘。
+ 当你滚动时，滚动条在重绘。
+ 当我们滚动时，固定的 "slider control" 在重绘。

重绘的代价很高昂，因为浏览器使用 CPU 来重建那个矩形的点阵。换句话说，它没有被 GPU “硬件加速”。

更多关于 rendering 标签的信息，参见：[DevTools - Rendering Settings](https://developer.chrome.com/devtools/docs/rendering-settings)。



# GPU 加速

你可以把一个网页想象为一堆矩形。布局和绘图都是由 CPU 完成的：

1. CPU 计算这些矩形的布局。矩形在哪里？它们有多大？
2. CPU 把矩形渲染成点阵位图（bitmap）。

之后如果可能的话，矩形被送到 GPU 以获得更好的性能：

3. CPU 以点阵位图的形式上传到 GPU 中。
4. 给 GPU 发送指令来处理这些位图。可能有平移/缩放/旋转，修改透明度，等等。



GPU 如何比 CPU 快呢？假设我们把一个红色点阵和一个绿色点阵结合，CPU 不得不一个一个像素地做：

<video src="CPU-composite.mp4" controls autoplay loop></video>

GPU 可以平行地组合所有像素：

<video src="GPU-composite.mp4" controls autoplay loop></video>

为了启用 GPU 加速，使用下面四个动画属性：

![](cheap-operations.jpg)

基本上只有 CSS3 transform 可以被 GPU 加速。任何盒模型属性（top, left, width, height, padding, margin, border...）都会触发重新布局和重绘。

因此修改我们 TweenMax 的代码，来使用 CSS transform：



```js
TweenMax.fromTo("#box",1, {

  css: {
    // 使用 CSS3 transform
    x: "-200px",
  }
},{

  css: {
    x: "200px",
  },


  repeat: -1,
  yoyo: true,
  ease: Power2.easeInOut,
}
```



[Codepen Demo](http://codepen.io/hayeah/full/YyGzva/)

TweenMax 通过使用 `transform3d` 属性来启用 GPU 加速。使用 rendering 监控器，你可以看到“green rectangles”没了，不再有浏览器重绘了。此外，启用“show composited layer border”，你会看到元素有一个橙色边框，意为它是个 3D 图层，被 GPU 加速：

<video src="show-composited-layer.mp4" controls></video>

总得来说，当修改 CSS 属性时，有三种可能的开销：

1. 重排（CPU。代价最高）。
2. 重绘（CPU）。
3. 变换, 旋转, 缩放, 透明度（GPU，代价最低）。



### 练习：使用 GPU 加速让 Logo 动起来

你的结果：

<video src="react-logo-composited.mp4" autoplay loop controls></video>



# 让 Robot 动起来

TweenMax 可以执行单个步骤、从某一个起始点变化到终点的动画。为了构建更复杂的动画，你可以使用 [TimeLineMax](https://greensock.com/docs/#/HTML5/GSAP/TimelineMax/) 来构建更加复杂、多步骤的动画。



```js
var t = new TimelineMax();
t.to("#box",1,{x: 200})
  .to("#box",0.5,{rotation: "360deg"})
  .to("#box",1,{y: 100})
  .to("#box",0.5,{rotation: "-=360deg"});
```



[Codepen Demo](http://codepen.io/hayeah/full/YyGzva/)

如果你需要 `repeat` 和 `yoyo`，把它们作为选项值传到 TimelineMax 的构造函数中：



```js
// 让动画一直执行
var t = new TimelineMax({yoyo: true, repeat: -1});
```



[Codepen Demo](http://codepen.io/hayeah/full/OyRVKv)



### 练习：晃动着的 Android Robot



```js
function animateRobot() {
}

window.onload = function() {
  // ...
  animateRobot();
}
```



你的结果：

<video src="android-shakeit.mp4" controls autoplay loop></video>



# 高级 - 指示器 & 网页滚动动画

这部分是可选的。我们要实现两个额外的特性：

1. 更新指示器状态来反映当前滚动的位置。
2. 当用户点击指示器跳转到一部分时，平滑地滚动到那里。

<video src="animated-scroll.mp4" controls loop autoplay></video>

注：如果你想要的话，使用 jQuery，但是这是一个练习使用 DOM API 的好机会。



### 练习：滚动事件发生时更新指示器状态

不论何时当窗口滚动时你应该使用 `window.scrollY` 来算出窗口正在展示的是哪一部分。

有四部分。你应该确保这些部分的 id 和指示器的 `href` 属性链接保持一致：



```html
<div id="intro-section" class="section">
</div>
<div id="native" class="section">
</div>
<div id="touch" class="section">
</div>
<div id="android" class="section">
</div>

<div id="slider-control">
  <a href="#intro-section">
    <div class="dot"></div>
  </a>

  <a href="#native">
    <div class="dot"></div>
  </a>

  <a href="#touch">
    <div class="dot"></div>
  </a>

  <a href="#android">
    <div class="dot"></div>
  </a>
</div>
```



完成下面的代码片段：



```js
function updateSliderControl() {
  // 获得所有的 slider 链接
  var links = document.querySelectorAll("#slider-control a")

  for(var i = 0; i < links.length; i++) {
    var link = links[i];

    // 获取被链接指向的部分
    var section = document.querySelector(...);
    var sectiontTop = ...
    var sectionBottom = ...

    // 检查 window.scrollY 是否在这部分中
    if(window.scrollY >= sectionTop && window.scrollY < sectionBottom) {
      link.className = "active";
    } else {
      link.className = "";
    }
  }
}

// 使用 onscroll 回调函数来更新 slider
window.onscroll = function() {
  // ...
  updateSliderControl();
}

// 当页面首次加载的时候更新 slider
window.onload = function() {
  // ...
  updateSliderControl();
};
```



+ 使用 querySelector 和 querySelectorAll 通过 CSS 选择器获取元素
+ 获取一个元素的属性，
  + 参考：[MDN - Element.attributes](https://developer.mozilla.org/en-US/docs/Web/API/Element/attributes)
  + 参考：[MDN - NamedNodeMap](https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap)
+ 获取一个元素相对于文档的高度，参考：http://stackoverflow.com/a/21880020

你的结果：

<video src="slider-control-update.mp4" controls></video>



### 练习：网页滚动动画

当你点击指示器的链接时，浏览器立即跳转到被链接 `href` 属性定位的部分。现在我们想要使用 GreenSock 来平滑滚动到被定为到的部分。

[ScrollToPlugin](https://greensock.com/ScrollToPlugin) 提供了额外的功能来实现网页滚动的动画效果。

让我们引入 scroll 插件。它必须在 `TweenMax.js` 之后加载：



```html
<script type="text/javascript" src="node_modules/gsap/src/uncompressed/TweenMax.js"></script>
<script type="text/javascript" src="node_modules/gsap/src/uncompressed/plugins/ScrollToPlugin.js"></script>
```



完成代码片段：



```js
function scrollToElement(element) {
  var topOfElement = ...

  TweenMax.to(window,1,{
    scrollTo: {
      y: topOfElement,
    },

    ease: Power2.easeInOut,
  });
}

function addSmoothScrolling() {
  var links = ...

  for(...) {
    var link = links[i];

    link.addEventListener("click",function(event) {
      // `event` 是鼠标点击事件

      // BUG 警告！使用闭包或者 ES6 `let` 修复。
      var href = link.blahblahblah;

      scrollToElement(...);
    });
  }
}

window.onload = function() {
  // ...
  addSmoothScrolling();
};
```




+ 你需要取消链接的默认行为
  + 参考： [MDN - Event.preventDefault()](https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)
+ 事件侦听器 bug 非常非常普遍
  + 参考： [adding 'click' event listeners in loop](http://stackoverflow.com/questions/8909652/adding-click-event-listeners-in-loop)

你的结果：

<video src="animated-scroll.mp4" controls></video>



# 总结

通过使用被优化的动画引擎，JavaScript 动画能像 CSS 动画一样快。选择最符合项目的那种吧！

在 ReactNative 中，JavaScript 动画是你唯一的选择。很多我们已经谈到的性能技巧也适用于 ReactNative。最重要的是：

+ 避免引起布局。
+ 动画可以通过 GPU 加速。

